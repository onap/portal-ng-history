/*
 * This file was generated by the Gradle 'init' task.
 */
plugins {
    id 'org.onap.portal.history.java-application-conventions'
    id 'io.spring.dependency-management'
    id 'org.springframework.boot'
    id 'jacoco'
    id 'org.sonarqube'
    id 'com.github.hierynomus.license'
    id 'com.gorylenko.gradle-git-properties'
}
apply from: "${rootDir}/gradle/verify-licenses.gradle"

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

ext {
        vavrVersion = '0.10.4'
        problemVersion = '0.27.1'
        problemSpringVersion = '0.27.0'
        logbackVersion = '1.2.11'
        logstashLogbackVersion = '7.2'
        embedMongoVersion = '3.2.8'
        embedMongoIntegrationVersion = '1.1.0-spring27x'
        springCloudWiremockVersion = '3.1.0'
}

dependencies {
    implementation project(':openapi')
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-data-mongodb-reactive'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-resource-server'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation "io.vavr:vavr:$vavrVersion"
    implementation "org.zalando:problem:$problemVersion"
    implementation "org.zalando:jackson-datatype-problem:$problemVersion"
    implementation "org.zalando:problem-spring-webflux:$problemSpringVersion"
    implementation "ch.qos.logback:logback-classic:$logbackVersion"
    implementation "ch.qos.logback:logback-core:$logbackVersion"
    implementation "net.logstash.logback:logstash-logback-encoder:$logstashLogbackVersion"

    compileOnly 'org.projectlombok:lombok'

    developmentOnly 'org.springframework.boot:spring-boot-devtools'

    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    annotationProcessor 'org.projectlombok:lombok'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'io.projectreactor:reactor-test'
    testImplementation 'io.rest-assured:rest-assured'
    testImplementation "org.springframework.cloud:spring-cloud-contract-wiremock:$springCloudWiremockVersion"
    testImplementation "de.flapdoodle.embed:de.flapdoodle.embed.mongo:$embedMongoVersion"
    testImplementation "de.flapdoodle.embed:de.flapdoodle.embed.mongo.spring:$embedMongoIntegrationVersion"
    testCompileOnly 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'
}

test {
    useJUnitPlatform()
    finalizedBy(jacocoTestReport)
}

jacocoTestReport {
    reports {
        xml.enabled true
    }
}

application {
    // Define the main class for the application.
    mainClass = 'org.onap.portal.history.PortalHistoryApplication'
}

sourceCompatibility = '17'
targetCompatibility = '17'

downloadLicenses {
    dependencyConfiguration = 'implementation'
    includeProjectDependencies = false
}

license {
    ignoreFailures = true
    header = project.file('LICENSE_HEADER')
    includes(["**/*.java"])
    ext.year = Calendar.getInstance().get(Calendar.YEAR)
}
configurations.implementation.setCanBeResolved(true)

springBoot {
    buildInfo {
        properties {
            artifact = "org-onap-portal-history"
            version = rootProject.file('version').text.trim()
            group = rootProject.group
            name = "History service that saves user actions"
        }
    }
}